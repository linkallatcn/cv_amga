import numpy as np
import matplotlib.pyplot as plt

import matplotlib as mpl
mpl.rcParams["font.family"] = "FangSong"  # 设置全局字体为仿宋
mpl.rcParams["axes.unicode_minus"] = False  # 确保负号显示正常

# 数据输入
positions = np.array([0,35,87, 149, 218, 307, 402, 504, 617])
times = np.array([0,0.01665834,0.03331667, 0.04997501, 0.06663335, 0.08329169,
                  0.09995002, 0.11660836, 0.1332667])

'''
positions = np.array([0.        ,   5.69663178,  22.78651345,  51.26966552,
        91.14608116, 142.41576035, 205.07866208, 279.13486157,
       364.58432462])
times = np.array([0,0.01665834,0.03331667, 0.04997501, 0.06663335, 0.08329169,
                  0.09995002, 0.11660836, 0.1332667])
'''

#标准9.8m/s²对应的垂直位置
#positions = np.array([0., 6, 23, 51, 91, 142, 205, 279, 364])
#times = np.array([0,0.01665834,0.03331667, 0.04997501, 0.06663335, 0.08329169,
#                  0.09995002, 0.11660836, 0.1332667])

positions = np.array([35, 87, 149, 218, 307, 402])
times = np.array([0.04997501, 0.06663335, 0.08329169,
                  0.09995002, 0.11660836, 0.1332667])


#positions = np.array([35, 87, 149, 218, 307, 402, 504, 617])
#times = np.array([0.04997501, 0.06663335, 0.08329169,
#                  0.09995002, 0.11660836, 0.1332667, 0.14992504, 0.16658337])

'''
标准数据对照
times = [0.0, 0.01665834, 0.03331667, 0.04997501, 0.06663335,
0.08329169,0.09995002, 0.11660836, 0.1332667, 0.14992504,
0.16658337, 0.18324171, 0.19990005]
times_np = np.array(times)
list(times_np*times_np*0.5*9.8*420/0.1)
positions_meter = [0.0, 0.00135975142862244, 0.00543900244945561, 0.012237757960050492, 0.02175601632789025,
0.03399377755297489, 0.04895103184020197, 0.06662779714725904, 0.087024065311561, 0.11013983633310787,
0.13597509388672882, 0.16452986899024813, 0.19580414695101225]
positions = [0.0, 5.710956000214248, 22.84381028771356, 51.398583432212064, 91.37526857713904,
142.77386572249455, 205.59433372884826, 279.8367480184879, 365.50107430855616, 462.587312599053,
571.095394324261, 691.0254497590421, 822.3774171942514]
'''

'''
# 使用阈值分割将图像二值化
_, binary = cv2.threshold(gray, 140, 150, cv2.THRESH_BINARY)

第26帧 (516, 26, 61, 69)
第27帧 (518, 77, 57, 66)
第28帧 (517, 141, 56, 61)
第29帧 (517, 210, 54, 62)
第30帧 (516, 298, 52, 57)
第31帧 (515, 393, 51, 54)
第32帧 (514, 495, 47, 58)
'''


scale = 0.1 / 419  # m/像素  0.000265 0.1 / 419
y = positions * scale  # 转换为米

# 二次拟合
coefficients = np.polyfit(times, y, deg=2)
g_fit = 2 * coefficients[0]  # g = 2a
v0_fit = coefficients[1]
y0_fit = coefficients[2]

# 拟合曲线
t_fit = np.linspace(times.min(), times.max(), 100)
y_fit = coefficients[0] * t_fit**2 + coefficients[1] * t_fit + coefficients[2]

# 绘图
plt.scatter(times, y, label='实验数据', color='red')
plt.plot(t_fit, y_fit, label=f'拟合曲线: $y = {coefficients[0]:.3f}t^2 + {coefficients[1]:.3f}t + {coefficients[2]:.3f}$')
plt.xlabel('时间 (s)')
plt.ylabel('位移 (m)')
plt.legend()
plt.title(f'重力加速度拟合结果: $g = {g_fit:.3f} \, \mathrm{{m/s^2}}$')
plt.grid(True)
plt.show()

# 输出结果
print(f"拟合重力加速度 g = {g_fit:.3f} m/s²")
print(f"初速度 v0 = {v0_fit:.3f} m/s")
print(f"初始位置 y0 = {y0_fit:.3f} m")